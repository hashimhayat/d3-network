<!DOCTYPE html>
<meta charset="utf-8">
<style>

.main-body {
  padding: 50px;
}

.underlay{
  position:absolute;
  bottom:0; left:0; top:0; right:0;
  margin:auto;
  height:0; width:0;
  background:#333;
  opacity:0;
  transition:1s all;
}

.bg:after {
    content : "";
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    background-image: url("/data/indigenousScience.jpg"); 

     Center and scale the image nicely 
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;

    width: 100%;
    height: 100%;
    opacity : 0.4;
    z-index: -1;
    -webkit-filter: blur(4px);
    filter: blur(4px);
}

.network {
  width : 80%;
  height: 80%;
}

.link {
  stroke: #ccc;
}

.node text {
  pointer-events: none;
  font-family: 'Montserrat', sans-serif;
  font-size: 12px;
}

.node:hover {
  cursor: pointer;
}

.root {
  -webkit-transition: -webkit-transform .8s ease-in-out;
  transition: transform .8s ease-in-out;
}

.root:hover {
  -webkit-transform: rotate(360deg);
  transform: rotate(360deg);
}

.issue_name {
  float : right;
  font-family: 'Montserrat', sans-serif;
  font-size: 20px;
  font-weight: bold;
}

.film_name {
  float : left;
  font-family: 'Montserrat', sans-serif;
  font-size: 19px;
  font-weight: normal;
}

</style>
<body>
  
<div class="main-body">

  <div class="network bg"> </div>
  <div class="film_name"> </div>
  <div class="issue_name"> Indigenous Science </div>

</div>


<link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="/data/d3/jquery.roundimage.js"></script>
<script src="//d3js.org/d3.v4.min.js"></script>

<script>

var width = $(window).width() - 150,
    height = $(window).height() - 100

var svg = d3.select(".network").append("svg")
    .attr("class", "main")
    .attr("width", width)
    .attr("height", height);

var simulation = d3.forceSimulation()

    .force("link", d3.forceLink().id(function(d) { return d.id }))
    .force("charge", d3.forceManyBody().distanceMax(200).distanceMin(80))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force('collide', d3.forceCollide().radius(28));

var links = [];
var nodes;
var data;
var neighbours = [];

var node_size = 40;

var LIGHT_COLOR = '#b2b2b2';
var DARK_COLOR = '#696e66';

d3.json("/data/films.json", function(error, json) {
  if (error) throw error;
  data = json;
  draw();
});

function draw(){
  
  nodes = createNodes(data);

  var link = svg.selectAll(".link")
      .data(links)
      // 
      .enter().append("line")
      .attr("class", "link")
      .style("stroke", function(d) { 
        if (d.type === "light") { return LIGHT_COLOR;}
        else {return DARK_COLOR;}
      })
      .style("stroke-width", function(d) { 
        if (d.type == "light") { return 1; } 
        else { return 1.5; }
      })

  link.exit().remove()

  var node = svg.selectAll(".node")
      .data(nodes)
      .enter().append("g")
      .attr("class", "node")
      .attr("id", function(d){
        return d.index;
      })
      .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended))

  node.exit().remove()

  var node_text = node.append("text")
    .attr("class", "node_text")
    .attr("id", function(d){ 
      return replaceAll(d.name," ","-"); }
    )
    .attr("dx", function(d) { 
      if (d.type == "keyword") { return 15; } 
      else if (d.type == "root") { return 25; }
      else { return 40; }
     })
    .attr("dy", function(d) { 
      if (d.type == "keyword") { return 4; } 
      else if (d.type == "film") { return 25; }
      else if (d.type == "root") { return 4; }
     })
    .style("display", function(d) { 
      if (d.type == "root") { return "block"; } 
      return "none";
     })
    .style("font-size", function(d) { 
      if (d.type == "root") { return 15; } 
     })
    .text(function(d)  { return d.name })

   node.append("image")
      .attr("class", function(d) { 
        if (d.type == "film") { return 'film'; } 
        else if (d.type == "root") { return 'root'; }
        else { return 'keyword'; }
       })
      .attr("xlink:href", function(d) { 
        if (d.type == "film") { return 'http://labocine.com/stills/movie_stills/' + d.img + '.jpg'; } 
        else { return '/assets/img/circle.png'; }
       })
      .attr("x", function(d) { 
        if (d.type == "keyword") { return -(node_size/6); } 
        else { return -(node_size/2); }
       })
      .attr("y", function(d) { 
        if (d.type == "keyword") { return -(node_size/6); } 
        else { return -(node_size/2); }
       })
      .attr("width", function(d) { 
        if (d.type == "keyword") { return node_size/3; } 
        else { return node_size; }
       })
      .attr("height", function(d) { 
        if (d.type == "keyword") { return node_size/3; } 
        else { return node_size; }
       })
      .attr("opacity", function(d) { 
        if (d.type == "keyword") { return 0.4; } 
        else { return 1; }
       })
      .on("mouseover", function (d) {
        
        d3.select(this)
        .transition()
        .attr("opacity", 1)

      })
      .on("mouseout", function (d) {
        d3.select(this)
        .transition()
        .attr("opacity", function(d) { 
          if (d.type == "keyword") { return 0.4; } 
          else { return 1; }
        })
      })

  $('.film').roundImage();

  node.on("mouseover", function (d) {
    
    neighbours = [];

    link.style('stroke', function(l) {
      if (d === l.source || d === l.target){
        if (d === l.source) { neighbours.push(l.target); } else { neighbours.push(l.source); }
        return DARK_COLOR;
      } else {
        return LIGHT_COLOR;
      } 
    });

    link.style("stroke-width", function(l) {
      if (d === l.source || d === l.target){

      } else {
        return 0;
      }
    })

    node.attr("visibility", function(n) { 
      if (hasNode(neighbours,n)) { 
        try {
          //node.select("#" + n.name.replaceAll(" ","-")).style("display", "block");
          $("#" + replaceAll(n.name," ","-")).fadeIn('slow')
        } catch(e) {
          console.log(n);
        }
      } 
    })

    node.attr("opacity", function(n) {
      if (d.type != "root"){
        if (n.type == "root" || d.type == "keyword" || n.name == d.name || hasNode(neighbours,n)){
          return 1;
        } else {
          return 0.1;
        }
      }
  
    })

    d3.select(this).select('text')
      .transition()
      .text(function(d){
        return d.name;
    })

    .style("font-size","15px")
    .style("display", "block")

    $('.film_name').html(d.name);
    $('.film_name').fadeIn('slow');
    
  });

  node.on("mouseout", function (d) {

    link.style("stroke", function(d) { 
        if (d.type === "light") { return LIGHT_COLOR;}
        else { return DARK_COLOR;}
    });

    link.style("stroke-width", function(l) {
      if (d.type == "light") { return 1; } 
      else { return 1.5; }
    })

    node.attr("visibility", function(n) { 
      if (hasNode(neighbours,n)) { 
        try {
          node.select("#" + replaceAll(n.name," ","-")).style("display", "none");
          $("#" + replaceAll(n.name," ","-")).fadeOut('slow')
        } catch(e) {
          console.log(n);
        }
      }
    })

    node.attr("opacity", function(n) {
        if (n.type == "keyword") { return 0.4; } 
        else { return 1; }
    })

    d3.select(this).select('text')
      .transition()
      .text(function(d){ return d.name; })
      .style("font-size", function(d) {
        
        if (d.type == "root") {return "15px"}
        return "12px";

      })
      .style("display", function(d) {
        if (d.type != "root") { return "none" }
      })

     $('.film_name').fadeOut('slow')

  })

  node.on("click", function(d){
    if (d.url) {
      window.open(d.url);
    }
  });


  simulation
      .nodes(nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(links);

  function ticked() {

    nodes[0].x = width / 2;
    nodes[0].y = height / 2;

    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { 
          if (d.source.y < 30){
            return Math.floor(Math.random() * 40) + 30  
          }
          return d.source.y; 
        })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { 

          if (d.target.y < 30){
            return Math.floor(Math.random() * 40) + 30  
          }
          return d.target.y; 
        });

    node
        .attr("cx", function(d) { 
          // console.log(d.x)
          return d.x; 
        })
        .attr("cy", function(d) { 
          if (d.y < 30){
            return Math.floor(Math.random() * 40) + 30  
          }
          return d.y; 
        });

    node.attr("transform", function(d) { 

      if (d.type == "film") {
        if (d.y < 30){
          return "translate(" + (d.x - (node_size/2)) + "," + (Math.floor(Math.random() * 40) + 30 - (node_size/2)) + ")";
        }
        return "translate(" + (d.x - (node_size/2)) + "," + (d.y - (node_size/2)) + ")"; 
      } else {
        if (d.y < 30){
          return "translate(" + d.x + "," + Math.floor(Math.random() * 40) + 30 + ")"; 
        }
        return "translate(" + d.x + "," + d.y + ")"; 
      }
    });
  }

}

function createNodes(json){

    var _nodes = [];
    var films = json.films;
    var cur_film_idx;

    // Creating and appending Root
    let node = {
        "id" : 0,
        "name": json["issue-title"],
        "type": "root"
    }
      
    _nodes.push(node);

    for (var i = 0; i < films.length; i++){
      
      // Cleaning tags
      var tags = films[i].tags.split(", ");
      var correct_tags = [];
      tags.forEach( function(element, index) {
        element.trim();
        if (element == ""){

        } else if (element.includes(",")){
          element.replace(",", "");
          correct_tags.push(element);
        } else {
          correct_tags.push(element);
        }
      });

      // Creating and appending Films 
      let node = {
        "id": _nodes.length,
        "name": films[i].title,
        "type": "film",
        "keywords": correct_tags,        
        "img" : films[i].id,
        "url": "https://www.labocine.com/film/" + films[i].id
      };
      
      _nodes.push(node);

      cur_film_idx = _nodes.length - 1;

      // Creating a Link between Root and Film
      let link = {
        "source": 0,
        "target": cur_film_idx,
        "type": "dark"
      };

      links.push(link)
    }

    // Creating and appending Keywords
    for (var i = 0; i < films.length; i++){

      var tags = films[i].tags.split(", ");
      var correct_tags = [];
      tags.forEach( function(element, index) {
        element.trim();
        if (element == ""){

        } else if (element.includes(",")){
          element.replace(",", "");
          correct_tags.push(element);
        } else {
          correct_tags.push(element);
        }
      });
      
      correct_tags.forEach( function(element, index) {

        let node = {
          "id" : _nodes.length,
          "name": element,
          "type": "keyword"
        };

        var keyword_node_idx = containNode(_nodes, node);
        
        if (!keyword_node_idx){
          _nodes.push(node);
          keyword_node_idx = _nodes.length - 1;
        } 

        var films_with_keyword = nodesForKeyword(_nodes, element);

        films_with_keyword.forEach( function(film_node, index) {
          
          // Creating a Link between Films and Keywords
          let link = {
            "source": film_node,
            "target": keyword_node_idx,
            "type": "light"
          };

          links.push(link);

        });
      });

    }

    return _nodes;
}

function hasNode(arr, node){

  for (var i = 0; i < arr.length; i++){

    if (arr[i].name == node.name){
      return true;
    }
  }
  return false;
}

function containNode(arr, node){
  
  for (var i = 0; i < arr.length; i++){
    if (arr[i].type == "keyword" && arr[i].name == node.name){
      return i;
    }
  }
  return false;
};

function replaceAll(str, search, replacement) {
    var target = str;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function nodesForKeyword(_nodes, keyword){
    
    var temp = [];
    for (var i = 1; i < _nodes.length; i++){

      if (_nodes[i].keywords && _nodes[i].keywords.includes(keyword)){
        temp.push(i);
      }
    }

    return temp;
}

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

</script>









